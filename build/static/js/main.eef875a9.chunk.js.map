{"version":3,"sources":["component/carCards/card.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","className","id","key","alt","name","src","image","onClick","clickPicture","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","randomizeImg","images","array","slice","setState","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","state","clickedArr","includes","currentScore","clickedArray","message","randomArray","randomImages","concat","newArray","topScore","addImages","map","img","console","log","card","randArr","_this2","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.eef875a9.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Card = props => (\n\n    <div className=\"imageBorder\">\n        <img className=\"img-thumbnail\" id={props.id} key={props.id} alt={props.name} src={props.image} onClick={() => props.clickPicture(props.id)} />\n    </div>\n\n);\n\nexport default Card;","import React from 'react';\n\nimport Card from \"./component/carCards/card\";\nimport images from \"./images.json\"\nimport './App.css';\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      randomImages: [],\n      clickedArr: [],\n      currentScore: 0,\n      topScore: 0,\n      images: images\n    };\n  }\n  randomizeImg = (images) => {\n    let array = images.slice();\n    this.setState({\n      images: array\n    });\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  }\n  componentDidMount() {\n    console.log(images);\n    let randArr = this.randomizeImg(images);\n    console.log(randArr);\n    this.setState({\n      randomImages: randArr,\n    })\n    // console.log(this.state.randomImages);\n  }\n\n  clickPicture = id => {\n\n\n    // if clicked an image already clicked set this.state.score = 0; empty clickeadArray, end of if block\n    if (this.state.clickedArr.includes(id)) {\n      this.setState({ currentScore: 0, clickedArray: [], message: \"That car has already been clicked\" });\n\n      var randomArray = this.randomizeImg(images);\n\n      this.setState({\n        randomImages: randomArray,\n      })\n      this.setState({\n        clickedArr: []\n      })\n    }\n    else {\n\n      this.setState({\n        clickedArr: this.state.clickedArr.concat([id]),\n        currentScore: this.state.currentScore + 1,\n        message: \"Correct\",\n\n      });\n\n      var newArray = this.randomizeImg(images);\n\n      this.setState({\n        randomImages: newArray,\n      })\n    }\n    // set topscore = score if score>topscore.\n    if (this.state.currentScore > this.state.topScore) {\n      this.setState({ topScore: this.state.currentScore });\n    }\n  }\n\n  addImages = () => {\n    let imgSet = this.state.randomImages.map((img) => {\n      console.log(img)\n      return (<Card\n        clickPicture={this.clickPicture}\n        image={img.img}\n        name={img.name}\n        key={img.id}\n        id={img.id}\n      />);\n    });\n    return imgSet;\n  }\n\n  render() {\n\n    return (\n      <div>\n\n        <div className=\"jumbotron jumbotron-fluid\">\n          <div className=\"container\">\n            <h1 className=\"display-4\">Clicky Game</h1>\n            <p className=\"lead\">Click each picture only once. See how high your score can get with out clicking the same picture twice.</p>\n            <div>\n              <p>Score: {this.state.currentScore}      Highscore: {this.state.topScore} </p>\n            </div>\n          </div>\n        </div>\n        <div className=\"container\">\n          <div >\n            <div className=\"col\">\n              <div className=\"row\">\n                {this.state.randomImages.map((img) => {\n                  // console.log(img)\n                  return (<Card id={img.id} key={img.id} name={img.name} image={img.image} clickPicture={this.clickPicture} />);\n                })\n                }\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}